{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Twinkle\\\\Desktop\\\\DormFindr_WebApp\\\\frontend\\\\src\\\\user\\\\AccountVerificationScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./AccountVerificationScreen.css\";\nimport VerifyBackground from \"../images/accveriwobutton.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountVerificationScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const [userEmail, setUserEmail] = useState('');\n  const [otp, setOtp] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleOTPVerification = async event => {\n    event.preventDefault(); // Prevent the default form submit action\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:4000/api/dormfindr/account-verification', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: userEmail,\n          otp: otp\n        })\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        navigate(\"/login\"); // Navigate to login on success\n      } else {\n        setError(data.message || 'Failed to verify account'); // Show error message from response\n      }\n    } catch (error) {\n      setError(\"Error verifying OTP: \" + error.message); // Show network or server error\n    }\n\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Account-screen\",\n    style: {\n      backgroundImage: `url(${VerifyBackground})`\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Account-container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"verify-container\",\n        onSubmit: handleOTPVerification,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"otp-input\",\n          type: \"email\",\n          placeholder: \"Enter Email\",\n          value: userEmail,\n          onChange: e => setUserEmail(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"otp-input\",\n          type: \"text\",\n          placeholder: \"Enter OTP\",\n          value: otp,\n          onChange: e => setOtp(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"verify-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Verifying...' : 'Submit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountVerificationScreen, \"7tZ0Ofa73AskOdn3tHaZ6FNgujU=\", false, function () {\n  return [useNavigate];\n});\n_c = AccountVerificationScreen;\nexport default AccountVerificationScreen;\nvar _c;\n$RefreshReg$(_c, \"AccountVerificationScreen\");","map":{"version":3,"names":["React","useState","VerifyBackground","useNavigate","jsxDEV","_jsxDEV","AccountVerificationScreen","_s","navigate","userEmail","setUserEmail","otp","setOtp","error","setError","isLoading","setIsLoading","handleOTPVerification","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","email","data","json","ok","success","message","className","style","backgroundImage","children","onSubmit","type","placeholder","value","onChange","e","target","required","fileName","_jsxFileName","lineNumber","columnNumber","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Twinkle/Desktop/DormFindr_WebApp/frontend/src/user/AccountVerificationScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./AccountVerificationScreen.css\"\r\nimport VerifyBackground from \"../images/accveriwobutton.png\";\r\nimport { useNavigate } from \"react-router-dom\"; \r\n\r\nconst AccountVerificationScreen = () => {\r\n  const navigate = useNavigate(); \r\n  const [userEmail, setUserEmail] = useState(''); \r\n  const [otp, setOtp] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleOTPVerification = async (event) => {\r\n    event.preventDefault(); // Prevent the default form submit action\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch('http://localhost:4000/api/dormfindr/account-verification', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email: userEmail, otp: otp }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      if (response.ok && data.success) {\r\n        navigate(\"/login\"); // Navigate to login on success\r\n      } else {\r\n        setError(data.message || 'Failed to verify account'); // Show error message from response\r\n      }\r\n    } catch (error) {\r\n      setError(\"Error verifying OTP: \" + error.message); // Show network or server error\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Account-screen\" style={{ backgroundImage: `url(${VerifyBackground})` }}>\r\n      <div className=\"Account-container\">\r\n        <form className=\"verify-container\" onSubmit={handleOTPVerification}>\r\n          <input\r\n            className=\"otp-input\"\r\n            type=\"email\"\r\n            placeholder=\"Enter Email\"\r\n            value={userEmail}\r\n            onChange={(e) => setUserEmail(e.target.value)}\r\n            required\r\n          />\r\n          <input\r\n            className=\"otp-input\"\r\n            type=\"text\"\r\n            placeholder=\"Enter OTP\"\r\n            value={otp}\r\n            onChange={(e) => setOtp(e.target.value)}\r\n            required\r\n          />\r\n          <button type=\"submit\" className=\"verify-button\" disabled={isLoading}>\r\n            {isLoading ? 'Verifying...' : 'Submit'}\r\n          </button>\r\n          {error && <div className=\"error-message\">{error}</div>}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountVerificationScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}