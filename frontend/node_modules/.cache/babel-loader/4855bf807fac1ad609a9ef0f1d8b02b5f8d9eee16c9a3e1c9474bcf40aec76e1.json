{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Twinkle\\\\Desktop\\\\DormFindr_WebApp\\\\frontend\\\\src\\\\user\\\\AccountVerificationScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./AccountVerificationScreen.css\";\nimport VerifyBackground from \"../images/accveriwobutton.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountVerificationScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const [userEmail, setUserEmail] = useState(''); // Assuming you'll get this from user input or session\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const navigateToVerification = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:4000/api/dormfindr/account-verification', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: userEmail\n        })\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        navigate(\"/login\");\n      } else {\n        setError(data.error || 'Failed to verify account');\n      }\n    } catch (error) {\n      setError(\"Error sending email: \" + error.message);\n    }\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Account-screen\",\n    style: {\n      backgroundImage: `url(${VerifyBackground})`\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Account-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"verify-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter OTP\",\n          value: otp,\n          onChange: e => setOtp(e.target.value),\n          className: \"otp-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"verify-button\",\n          onClick: navigateToLogin,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountVerificationScreen, \"LXUNKKzV1W1DFTP7vRowhUtfSqE=\", false, function () {\n  return [useNavigate];\n});\n_c = AccountVerificationScreen;\nexport default AccountVerificationScreen;\nvar _c;\n$RefreshReg$(_c, \"AccountVerificationScreen\");","map":{"version":3,"names":["React","useState","VerifyBackground","useNavigate","jsxDEV","_jsxDEV","AccountVerificationScreen","_s","navigate","userEmail","setUserEmail","error","setError","isLoading","setIsLoading","navigateToVerification","response","fetch","method","headers","body","JSON","stringify","email","data","json","ok","success","message","className","style","backgroundImage","children","type","placeholder","value","otp","onChange","e","setOtp","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","navigateToLogin","_c","$RefreshReg$"],"sources":["C:/Users/Twinkle/Desktop/DormFindr_WebApp/frontend/src/user/AccountVerificationScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./AccountVerificationScreen.css\"\r\nimport VerifyBackground from \"../images/accveriwobutton.png\";\r\nimport { useNavigate } from \"react-router-dom\"; \r\n\r\nconst AccountVerificationScreen = () => {\r\n  const navigate = useNavigate(); \r\n  const [userEmail, setUserEmail] = useState(''); // Assuming you'll get this from user input or session\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const navigateToVerification = async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch('http://localhost:4000/api/dormfindr/account-verification', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email: userEmail }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok && data.success) {\r\n        navigate(\"/login\");\r\n      } else {\r\n        setError(data.error || 'Failed to verify account');\r\n      }\r\n    } catch (error) {\r\n      setError(\"Error sending email: \" + error.message);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\nreturn (\r\n    <div className=\"Account-screen\" style={{ backgroundImage: `url(${VerifyBackground})` }}>\r\n      <div className=\"Account-container\">\r\n        <div className=\"verify-container\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter OTP\"\r\n            value={otp}\r\n            onChange={(e) => setOtp(e.target.value)}\r\n            className=\"otp-input\"\r\n          />\r\n          <button className=\"verify-button\" onClick={navigateToLogin}>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountVerificationScreen;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,iCAAiC;AACxC,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,yBAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMc,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACzCD,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,0DAA0D,EAAE;QACvFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,KAAK,EAAEd;QAAU,CAAC;MAC3C,CAAC,CAAC;MAEF,MAAMe,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,IAAIT,QAAQ,CAACU,EAAE,IAAIF,IAAI,CAACG,OAAO,EAAE;QAC/BnB,QAAQ,CAAC,QAAQ,CAAC;MACpB,CAAC,MAAM;QACLI,QAAQ,CAACY,IAAI,CAACb,KAAK,IAAI,0BAA0B,CAAC;MACpD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,QAAQ,CAAC,uBAAuB,GAAGD,KAAK,CAACiB,OAAO,CAAC;IACnD;IACAd,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAEH,oBACIT,OAAA;IAAKwB,SAAS,EAAC,gBAAgB;IAACC,KAAK,EAAE;MAAEC,eAAe,EAAG,OAAM7B,gBAAiB;IAAG,CAAE;IAAA8B,QAAA,eACrF3B,OAAA;MAAKwB,SAAS,EAAC,mBAAmB;MAAAG,QAAA,eAChC3B,OAAA;QAAKwB,SAAS,EAAC,kBAAkB;QAAAG,QAAA,gBAC/B3B,OAAA;UACE4B,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,WAAW;UACvBC,KAAK,EAAEC,GAAI;UACXC,QAAQ,EAAGC,CAAC,IAAKC,MAAM,CAACD,CAAC,CAACE,MAAM,CAACL,KAAK,CAAE;UACxCN,SAAS,EAAC;QAAW;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB,CAAC,eACFvC,OAAA;UAAQwB,SAAS,EAAC,eAAe;UAACgB,OAAO,EAAEC,eAAgB;UAAAd,QAAA,EAAC;QAE5D;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACrC,EAAA,CAhDID,yBAAyB;EAAA,QACZH,WAAW;AAAA;AAAA4C,EAAA,GADxBzC,yBAAyB;AAkD/B,eAAeA,yBAAyB;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}